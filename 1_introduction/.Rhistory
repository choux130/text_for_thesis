datt.ar_p=datt[datt$PMD=="P",]$Aspect.Ratio
datt.ar_m=datt[datt$PMD=="M",]$Aspect.Ratio
datt.ar_d=datt[datt$PMD=="D",]$Aspect.Ratio
## All Arithmetic Means ####
m.ar=c(mean(datt.ar),mean(datt.ar_p),
mean(datt.ar_m),mean(datt.ar_d))
names(m.ar)=c("wm.ar.all","wm.ar.p","wm.ar.m","wm.ar.d")
# wm.ar.all   wm.ar.p   wm.ar.m   wm.ar.d
#  1.474672  1.529380  1.369450  1.525185
# PERMUTATION TEST ####
## Setting Arguments ####
set.seed(12345)
reps=10000
set_f_m.ar = numeric(length=reps)
set_t_m.ar.pm = numeric(length=reps)
set_t_m.ar.md = numeric(length=reps)
set_t_m.ar.pd = numeric(length=reps)
for (i in 1:reps){
### Setting data
permu.ar=sample(datt$Aspect.Ratio, dim(datt)[1], replace=FALSE)
permu.dat=data.frame(PMD=datt$PMD,Aspect.Ratio=permu.ar)
permu.dat.ar=permu.dat$Aspect.Ratio
permu.dat.ar_p=permu.dat[permu.dat$PMD=="P",]$Aspect.Ratio
permu.dat.ar_m=permu.dat[permu.dat$PMD=="M",]$Aspect.Ratio
permu.dat.ar_d=permu.dat[permu.dat$PMD=="D",]$Aspect.Ratio
### Calculating overall mean and mean by locations
m.ar_permu = c(mean(permu.dat.ar),mean(permu.dat.ar_p),
mean(permu.dat.ar_m),mean(permu.dat.ar_d))
### Save the f and t values
set_f_m.ar[i] = sum((m.ar_permu[2:4]-m.ar_permu[1])^2)
set_t_m.ar.pm[i] = m.ar_permu[2]-m.ar_permu[3]
set_t_m.ar.md[i] = m.ar_permu[3]-m.ar_permu[4]
set_t_m.ar.pd[i] = m.ar_permu[2]-m.ar_permu[4]
}
## P-value for the Permutation Tests ####
### overall test ####
f_m.ar = sum((m.ar[2:4] - m.ar[1])^2) # 0.0166162
p_f_m.ar = length(set_f_m.ar[set_f_m.ar>=f_m.ar])/reps # 0.1838
### pairwise tests ####
#### P vs. M
t_m.ar.pm = unname(m.ar[2] - m.ar[3]) # 0.15993
p_t_m.ar.pm = 2*length(set_t_m.ar.pm[set_t_m.ar.pm>=t_m.ar.pm])/reps # 0.1046
#### M vs. D
t_m.ar.md = unname(m.ar[3] - m.ar[4]) # -0.155735
p_t_m.ar.md = 2*length(set_t_m.ar.md[set_t_m.ar.md<=t_m.ar.md])/reps # 0.1102
#### P vs. D
t_m.ar.pd = unname(m.ar[2] - m.ar[4]) # 0.004195
p_t_m.ar.pd = 2*length(set_t_m.ar.pd[set_t_m.ar.pd>=t_m.ar.pd])/reps # 0.9884
@
<<echo=FALSE, results='asis', message = FALSE>>=
prop=c("Area",NA,"Perimeter",NA,"Circularity","Aspect Ratio")
est=c("WM","MLE","WM","2TAE","AM","AM")
p=c(p_f.area, p_f.per, p_f_m.cir, p_f_m.ar)
p=formatC(p,format="f",digits=4)
p[c(1,4)]=rep("<0.0001",2)
p_m=c(p_t_wm.area.pm, p_t_mle.area.pm, p_t_wm.per.pm,
p_t_stae.per.pm, p_t_m.cir.pm, p_t_m.ar.pm)
p_m=formatC(p_m,format="f",digits=4)
m_d=c(p_t_wm.area.md, p_t_mle.area.md, p_t_wm.per.md,
p_t_stae.per.md, p_t_m.cir.md, p_t_m.ar.md)
m_d=formatC(m_d,format="f",digits=4)
m_d[c(1,3,4)]=rep("<0.0001",3)
p_d=c(p_t_wm.area.pd, p_t_mle.area.pd, p_t_wm.per.pd,
p_t_stae.per.pd, p_t_m.cir.pd, p_t_m.ar.pd)
p_d=formatC(p_d,format="f",digits=4)
tab=cbind(Property=prop, Estimate=est, Overall=p, pm=p_m, md=m_d, pd=p_d)
colnames(tab)=c("Property", "Estimator", "Overall",
"P vs. M", "M vs. D", "P vs. D")
library(Hmisc)
out <- sub("&&&&&\\\\tabularnewline", "", capture.output(
latex(tab,rowname = NULL, file= "",
n.rgroup = c(2,2,1,1),
label="tab", col.just= c("c","c","r","r","r","r"),
caption.loc=c("bottom"),
caption="Unadjusted p-values from Overall and Pairwise Comparison Hypothesis Tests. The significance level for Overall Hypothesis Test is 0.05 and the significance level for Pairwise Hypothesis Test with the Bonferroni correction to 0.0167.",where= "!htbp")))
writeLines(out)
@
<<echo=FALSE,warning=FALSE, message=FALSE>>=
####################
####### Area #######
####################
# SET DATA ####
datt=read.csv("/Users/chou/Google Drive/UMN2014-2016/Spring2016/Plan B/final/clean_dat.csv",header=TRUE)
datt.area=datt$Area
datt.area_p=datt[datt$PMD=="P",]$Area
datt.area_m=datt[datt$PMD=="M",]$Area
datt.area_d=datt[datt$PMD=="D",]$Area
## Function: Weighted Mean ####
fun_wm.area=function(data.area, data.area_p, data.area_m, data.area_d){
w.area.all=sum(data.area)/data.area
wm.area.all=sum(data.area*w.area.all)/sum(w.area.all)
w.area.p=sum(data.area_p)/data.area_p
wm.area.p=sum(data.area_p*w.area.p)/sum(w.area.p)
w.area.m=sum(data.area_m)/data.area_m
wm.area.m=sum(data.area_m*w.area.m)/sum(w.area.m)
w.area.d=sum(data.area_d)/data.area_d
wm.area.d=sum(data.area_d*w.area.d)/sum(w.area.d)
output_wm.area=c(wm.area.all,wm.area.p,wm.area.m,wm.area.d)
return(output_wm.area)
}
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_wm.area.all=numeric(length=reps)
set_wm.area.p=numeric(length=reps)
set_wm.area.m=numeric(length=reps)
set_wm.area.d=numeric(length=reps)
set_mle.area.all=numeric(length=reps)
set_mle.area.p=numeric(length=reps)
set_mle.area.m=numeric(length=reps)
set_mle.area.d=numeric(length=reps)
set_diff_wm.area.pm = numeric(length=reps)
set_diff_wm.area.md = numeric(length=reps)
set_diff_wm.area.pd = numeric(length=reps)
set_diff_mle.area.pm = numeric(length=reps)
set_diff_mle.area.md = numeric(length=reps)
set_diff_mle.area.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt.area=sample(datt.area,length(datt.area),replace=T)
boot.datt.area_p=sample(datt.area_p,length(datt.area_p),replace=T)
boot.datt.area_m=sample(datt.area_m,length(datt.area_m),replace=T)
boot.datt.area_d=sample(datt.area_d,length(datt.area_d),replace=T)
wm.area_boot=fun_wm.area(boot.datt.area, boot.datt.area_p,
boot.datt.area_m, boot.datt.area_d)
set_wm.area.all[i]=wm.area_boot[1]
set_wm.area.p[i]=wm.area_boot[2]
set_wm.area.m[i]=wm.area_boot[3]
set_wm.area.d[i]=wm.area_boot[4]
set_mle.area.all[i]=mean(boot.datt.area)/2
set_mle.area.p[i]=mean(boot.datt.area_p)/2
set_mle.area.m[i]=mean(boot.datt.area_m)/2
set_mle.area.d[i]=mean(boot.datt.area_d)/2
set_diff_wm.area.pm[i] = wm.area_boot[2] - wm.area_boot[3]
set_diff_wm.area.md[i] = wm.area_boot[3] - wm.area_boot[4]
set_diff_wm.area.pd[i] = wm.area_boot[2] - wm.area_boot[4]
set_diff_mle.area.pm[i] = set_mle.area.p[i] - set_mle.area.m[i]
set_diff_mle.area.md[i] = set_mle.area.m[i] - set_mle.area.d[i]
set_diff_mle.area.pd[i] = set_mle.area.p[i] - set_mle.area.d[i]
}
## CI ####
### overall and every locations ####
ci_wm.area.all=quantile(set_wm.area.all,c(0.05/2,1-0.05/2)) # 1680.974 2243.383
ci_wm.area.p=quantile(set_wm.area.p,c(0.05/2,1-0.05/2)) # 1680.974 2243.383
ci_wm.area.m=quantile(set_wm.area.m,c(0.05/2,1-0.05/2)) # 2038.772 2791.910
ci_wm.area.d=quantile(set_wm.area.d,c(0.05/2,1-0.05/2)) # 873.0193 1350.5643
ci_mle.area.all=quantile(set_mle.area.all,c(0.05/2,1-0.05/2)) # 1062.192 1310.405
ci_mle.area.p=quantile(set_mle.area.p,c(0.05/2,1-0.05/2)) # 1032.411 1426.765
ci_mle.area.m=quantile(set_mle.area.m,c(0.05/2,1-0.05/2)) # 1276.535 1686.788
ci_mle.area.d=quantile(set_mle.area.d,c(0.05/2,1-0.05/2)) # 669.2359 1055.7634
### difference in each pairs ####
#### P vs. M
ci_wm.area.pm=quantile(set_diff_wm.area.pm,c(0.0167/2,1-0.0167/2)) # -1036.8946   120.9274
ci_mle.area.pm=quantile(set_diff_mle.area.pm,c(0.0167/2,1-0.0167/2)) # -602.7395  104.3074
#### M vs. D
ci_wm.area.md=quantile(set_diff_wm.area.md,c(0.0167/2,1-0.0167/2)) # 767.2153 1869.3910
ci_mle.area.md=quantile(set_diff_mle.area.md,c(0.0167/2,1-0.0167/2)) # 274.5067 961.3635
#### P vs. D
ci_wm.area.pd=quantile(set_diff_wm.area.pd,c(0.0167/2,1-0.0167/2)) # 400.3935 1313.6611
ci_mle.area.pd=quantile(set_diff_mle.area.pd,c(0.0167/2,1-0.0167/2)) # 27.9301 711.4919
@
<<echo=FALSE,warning=FALSE, message=FALSE>>=
##########################
####### Perimeter #######
#########################
# SET DATA ####
datt.area=datt$Area
datt.area_p=datt[datt$PMD=="P",]$Area
datt.area_m=datt[datt$PMD=="M",]$Area
datt.area_d=datt[datt$PMD=="D",]$Area
datt.per=datt$Perimeter
datt.per_p=datt[datt$PMD=="P",]$Perimeter
datt.per_m=datt[datt$PMD=="M",]$Perimeter
datt.per_d=datt[datt$PMD=="D",]$Perimeter
datt.cir=datt$Circularity
datt.cir_p=datt[datt$PMD=="P",]$Circularity
datt.cir_m=datt[datt$PMD=="M",]$Circularity
datt.cir_d=datt[datt$PMD=="D",]$Circularity
datt_p=datt[datt$PMD=="P",]
datt_m=datt[datt$PMD=="M",]
datt_d=datt[datt$PMD=="D",]
## Function: Weighted Mean ####
fun_wm.per=function(data.area, data.per, data.area_p, data.per_p,
data.area_m, data.per_m,
data.area_d, data.per_d){
w.per.all=sum(data.area)/data.area
wm.per.all=sum(data.per*w.per.all)/sum(w.per.all) #158.7518
w.per.p=sum(data.area_p)/data.area_p
wm.per.p=sum(data.per_p*w.per.p)/sum(w.per.p)
w.per.m=sum(data.area_m)/data.area_m
wm.per.m=sum(data.per_m*w.per.m)/sum(w.per.m)
w.per.d=sum(data.area_d)/data.area_d
wm.per.d=sum(data.per_d*w.per.d)/sum(w.per.d)
output_wm.per=c(wm.per.all, wm.per.p, wm.per.m, wm.per.d)
return(output_wm.per)
}
## Function: sTAE ####
fun1_stae.per=function(data.area, data.cir){
m.area=mean(data.area)
var.area=var(data.area)
m.cir=mean(data.cir)
var.cir=var(data.cir)
output1_stae.per=sqrt(4*pi)*(sqrt(m.area/(2*m.cir))-
(1/8)*(m.area/2)^(-3/2)*(m.cir)^(-1/2)*(var.area/2)+
(3/8)*(m.area/2)^(1/2)*(m.cir)^(-5/2)*(var.cir))
return(output1_stae.per)
}
fun2_stae.per=function(data.area, data.cir,
data.area_p, data.cir_p,
data.area_m, data.cir_m,
data.area_d, data.cir_d){
output2_stae.per.all=fun1_stae.per(data.area, data.cir) #130.5544
output2_stae.per.p=fun1_stae.per(data.area_p, data.cir_p) #130.5544
output2_stae.per.m=fun1_stae.per(data.area_m, data.cir_m) #130.5544
output2_stae.per.d=fun1_stae.per(data.area_d, data.cir_d) #130.5544
output2_stae.per=c(output2_stae.per.all, output2_stae.per.p,
output2_stae.per.m, output2_stae.per.d)
return(output2_stae.per)
}
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_wm.per.all=numeric(length=reps)
set_wm.per.p=numeric(length=reps)
set_wm.per.m=numeric(length=reps)
set_wm.per.d=numeric(length=reps)
set_stae.per.all=numeric(length=reps)
set_stae.per.p=numeric(length=reps)
set_stae.per.m=numeric(length=reps)
set_stae.per.d=numeric(length=reps)
set_diff_wm.per.pm = numeric(length=reps)
set_diff_wm.per.md = numeric(length=reps)
set_diff_wm.per.pd = numeric(length=reps)
set_diff_stae.per.pm = numeric(length=reps)
set_diff_stae.per.md = numeric(length=reps)
set_diff_stae.per.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt=datt[sample(1:dim(datt)[1],dim(datt),replace=T),]
boot.datt_p=datt_p[sample(1:dim(datt_p)[1],dim(datt_p),replace=T),]
boot.datt_m=datt_m[sample(1:dim(datt_m)[1],dim(datt_m),replace=T),]
boot.datt_d=datt_d[sample(1:dim(datt_d)[1],dim(datt_d),replace=T),]
boot.datt.area=boot.datt$Area
boot.datt.area_p=boot.datt_p$Area
boot.datt.area_m=boot.datt_m$Area
boot.datt.area_d=boot.datt_d$Area
boot.datt.per=boot.datt$Perimeter
boot.datt.per_p=boot.datt_p$Perimeter
boot.datt.per_m=boot.datt_m$Perimeter
boot.datt.per_d=boot.datt_d$Perimeter
boot.datt.cir=boot.datt$Circularity
boot.datt.cir_p=boot.datt_p$Circularity
boot.datt.cir_m=boot.datt_m$Circularity
boot.datt.cir_d=boot.datt_d$Circularity
## Overall weighted mean
wm.per_boot=fun_wm.per(boot.datt.area, boot.datt.per,
boot.datt.area_p, boot.datt.per_p,
boot.datt.area_m, boot.datt.per_m,
boot.datt.area_d, boot.datt.per_d)
## Overall 2nd order Taylor approximation
stae.per_boot=fun2_stae.per(boot.datt.area, boot.datt.cir,
boot.datt.area_p,  boot.datt.cir_p,
boot.datt.area_m,  boot.datt.cir_m,
boot.datt.area_d,  boot.datt.cir_d)
set_wm.per.all[i]=wm.per_boot[1]
set_wm.per.p[i]=wm.per_boot[2]
set_wm.per.m[i]=wm.per_boot[3]
set_wm.per.d[i]=wm.per_boot[4]
set_stae.per.all[i] = stae.per_boot[1]
set_stae.per.p[i] = stae.per_boot[2]
set_stae.per.m[i] = stae.per_boot[3]
set_stae.per.d[i] = stae.per_boot[4]
set_diff_wm.per.pm[i] = wm.per_boot[2] - wm.per_boot[3]
set_diff_wm.per.md[i] = wm.per_boot[3] - wm.per_boot[4]
set_diff_wm.per.pd[i] = wm.per_boot[2] - wm.per_boot[4]
set_diff_stae.per.pm[i] = set_stae.per.p[i] - set_stae.per.m[i]
set_diff_stae.per.md[i] = set_stae.per.m[i] - set_stae.per.d[i]
set_diff_stae.per.pd[i] = set_stae.per.p[i] - set_stae.per.d[i]
}
## CI ####
### overall and every locations ####
ci_wm.per.all=quantile(set_wm.per.all,c(0.05/2,1-0.05/2)) # 147.8760 171.0028
ci_wm.per.p=quantile(set_wm.per.p,c(0.05/2,1-0.05/2)) # 164.4985 191.4685
ci_wm.per.m=quantile(set_wm.per.m,c(0.05/2,1-0.05/2)) # 177.8577 209.6533
ci_wm.per.d=quantile(set_wm.per.d,c(0.05/2,1-0.05/2)) # 121.0496 150.0380
ci_stae.per.all=quantile(set_stae.per.all,c(0.05/2,1-0.05/2)) # 123.2696 138.3049
ci_stae.per.p=quantile(set_stae.per.p,c(0.05/2,1-0.05/2)) # 123.3723 147.1682
ci_stae.per.m=quantile(set_stae.per.m,c(0.05/2,1-0.05/2)) # 137.3493 158.8023
ci_stae.per.d=quantile(set_stae.per.d,c(0.05/2,1-0.05/2)) # 95.11829 120.94418
### difference in each pairs ####
#### P vs. M
ci_wm.per.pm=quantile(set_diff_wm.per.pm,c(0.0167/2,1-0.0167/2)) # -41.62799  10.16246
ci_stae.per.pm=quantile(set_diff_stae.per.pm,c(0.0167/2,1-0.0167/2)) # -32.273450   6.945564
#### M vs. D
ci_wm.per.md=quantile(set_diff_wm.per.md,c(0.0167/2,1-0.0167/2)) # 32.03035 84.53292
ci_stae.per.md=quantile(set_diff_stae.per.md,c(0.0167/2,1-0.0167/2)) # 19.23077 60.69774
#### P vs. D
ci_wm.per.pd=quantile(set_diff_wm.per.pd,c(0.0167/2,1-0.0167/2)) # 17.91930 66.71862
ci_stae.per.pd=quantile(set_diff_stae.per.pd,c(0.0167/2,1-0.0167/2)) # 6.08976 48.08719
@
<<echo=FALSE,warning=FALSE, message=FALSE>>=
###########################
####### Circularity ######
##########################
# SET DATA ####
datt.cir=datt$Circularity
datt.cir_p=datt[datt$PMD=="P",]$Circularity
datt.cir_m=datt[datt$PMD=="M",]$Circularity
datt.cir_d=datt[datt$PMD=="D",]$Circularity
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_m.cir.all=numeric(length=reps)
set_m.cir.p=numeric(length=reps)
set_m.cir.m=numeric(length=reps)
set_m.cir.d=numeric(length=reps)
set_diff_m.cir.pm = numeric(length=reps)
set_diff_m.cir.md = numeric(length=reps)
set_diff_m.cir.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt.cir=sample(datt.cir,length(datt.cir),replace=T)
boot.datt.cir_p=sample(datt.cir_p,length(datt.cir_p),replace=T)
boot.datt.cir_m=sample(datt.cir_m,length(datt.cir_m),replace=T)
boot.datt.cir_d=sample(datt.cir_d,length(datt.cir_d),replace=T)
m.cir_boot=c(mean(boot.datt.cir), mean(boot.datt.cir_p),
mean(boot.datt.cir_m), mean(boot.datt.cir_d))
set_m.cir.all[i]=m.cir_boot[1]
set_m.cir.p[i]=m.cir_boot[2]
set_m.cir.m[i]=m.cir_boot[3]
set_m.cir.d[i]=m.cir_boot[4]
set_diff_m.cir.pm[i] = m.cir_boot[2] - m.cir_boot[3]
set_diff_m.cir.md[i] = m.cir_boot[3] - m.cir_boot[4]
set_diff_m.cir.pd[i] = m.cir_boot[2] - m.cir_boot[4]
}
## CI ####
### overall and every locations ####
ci_m.cir.all=quantile(set_m.cir.all,c(0.05/2,1-0.05/2)) # 0.7207111 0.7566492
ci_m.cir.p=quantile(set_m.cir.p,c(0.05/2,1-0.05/2)) # 0.7105172 0.7760976
ci_m.cir.m=quantile(set_m.cir.m,c(0.05/2,1-0.05/2)) # 0.7466694 0.7937179
ci_m.cir.d=quantile(set_m.cir.d,c(0.05/2,1-0.05/2)) # 0.6681738 0.7322703
### difference in each pairs ####
#### P vs. M
ci_m.cir.pm=quantile(set_diff_m.cir.pm,c(0.0167/2,1-0.0167/2)) # -0.07683523  0.02251121
#### M vs. D
ci_m.cir.md=quantile(set_diff_m.cir.md,c(0.0167/2,1-0.0167/2)) # 0.02000446 0.11876638
#### P vs. D
ci_m.cir.pd=quantile(set_diff_m.cir.pd,c(0.0167/2,1-0.0167/2)) # -0.01389986  0.09895042
@
<<echo=FALSE,warning=FALSE, message=FALSE>>=
############################
####### Asepct Ratio #######
############################
# SET DATA ####
datt.ar=datt$Aspect.Ratio
datt.ar_p=datt[datt$PMD=="P",]$Aspect.Ratio
datt.ar_m=datt[datt$PMD=="M",]$Aspect.Ratio
datt.ar_d=datt[datt$PMD=="D",]$Aspect.Ratio
# BOOTSTRAP FOR CI ####
## Setting Arguments ####
reps=10000
set.seed(12345)
set_m.ar.all=numeric(length=reps)
set_m.ar.p=numeric(length=reps)
set_m.ar.m=numeric(length=reps)
set_m.ar.d=numeric(length=reps)
set_diff_m.ar.pm = numeric(length=reps)
set_diff_m.ar.md = numeric(length=reps)
set_diff_m.ar.pd = numeric(length=reps)
## Bootstrap Algorithm ####
for (i in 1:reps){
boot.datt.ar=sample(datt.ar,length(datt.ar),replace=T)
boot.datt.ar_p=sample(datt.ar_p,length(datt.ar_p),replace=T)
boot.datt.ar_m=sample(datt.ar_m,length(datt.ar_m),replace=T)
boot.datt.ar_d=sample(datt.ar_d,length(datt.ar_d),replace=T)
m.ar_boot=c(mean(boot.datt.ar), mean(boot.datt.ar_p),
mean(boot.datt.ar_m), mean(boot.datt.ar_d))
set_m.ar.all[i]=m.ar_boot[1]
set_m.ar.p[i]=m.ar_boot[2]
set_m.ar.m[i]=m.ar_boot[3]
set_m.ar.d[i]=m.ar_boot[4]
set_diff_m.ar.pm[i] = m.ar_boot[2] - m.ar_boot[3]
set_diff_m.ar.md[i] = m.ar_boot[3] - m.ar_boot[4]
set_diff_m.ar.pd[i] = m.ar_boot[2] - m.ar_boot[4]
}
## CI ####
### overall and every locations ####
ci_m.ar.all=quantile(set_m.ar.all,c(0.05/2,1-0.05/2)) # 1.399457 1.558271
ci_m.ar.p=quantile(set_m.ar.p,c(0.05/2,1-0.05/2)) # 1.384360 1.704902
ci_m.ar.m=quantile(set_m.ar.m,c(0.05/2,1-0.05/2)) # 1.268968 1.490073
ci_m.ar.d=quantile(set_m.ar.d,c(0.05/2,1-0.05/2)) # 1.409164 1.657349
### difference in each pairs ####
#### P vs. M
ci_m.ar.pm=quantile(set_diff_m.ar.pm,c(0.0167/2,1-0.0167/2)) # -0.07729163  0.40830669
#### M vs. D
ci_m.ar.md=quantile(set_diff_m.ar.md,c(0.0167/2,1-0.0167/2)) # -0.36042486  0.04415264
#### P vs. D
ci_m.ar.pd=quantile(set_diff_m.ar.pd,c(0.0167/2,1-0.0167/2)) # -0.2379284  0.2610344
@
d_a=data.frame(
Estimator=rep(c("WM", "MLE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.area[2:4],mle.area[2:4]),
low=c(ci_wm.area.p[1], ci_wm.area.m[1],ci_wm.area.d[1],
ci_mle.area.p[1], ci_mle.area.m[1],ci_mle.area.d[1]),
up=c(ci_wm.area.p[2], ci_wm.area.m[2],ci_wm.area.d[2],
ci_mle.area.p[2], ci_mle.area.m[2],ci_mle.area.d[2])
)
d_a[,3:5]=round(d_a[,3:5], 2)
d_a$Estimator = factor(d_a$Estimator, levels = c("WM", "MLE"))
d_per=data.frame(
Estimator=rep(c("WM", "2TAE"),each=3),
Location=rep(c("P","M","D"),2),
value= c(wm.per[2:4], stae.per[2:4]),
low=c(ci_wm.per.p[1], ci_wm.per.m[1],ci_wm.per.d[1],
ci_stae.per.p[1], ci_stae.per.m[1],ci_stae.per.d[1]),
up=c(ci_wm.per.p[2], ci_wm.per.m[2],ci_wm.per.d[2],
ci_stae.per.p[2], ci_stae.per.m[2],ci_stae.per.d[2])
)
d_per[,3:5]=round(d_per[,3:5], 2)
d_per$Estimator = factor(d_per$Estimator, levels = c("WM", "2TAE"))
d_cir=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.cir[2:4]),
low=c(ci_m.cir.p[1], ci_m.cir.m[1],ci_m.cir.d[1]),
up=c(ci_m.cir.p[2], ci_m.cir.m[2],ci_m.cir.d[2])
)
d_cir[,3:5]=round(d_cir[,3:5], 3)
d_ar=data.frame(
Estimator=rep("AM",each=3),
Location=rep(c("P","M","D"),1),
value= c(m.ar[2:4]),
low=c(ci_m.ar.p[1], ci_m.ar.m[1],ci_m.ar.d[1]),
up=c(ci_m.ar.p[2], ci_m.ar.m[2],ci_m.ar.d[2])
)
d_ar[,3:5]=round(d_ar[,3:5], 3)
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area")+   coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
g_area
pd <- position_dodge(width=0.5)
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area")+
theme(plot.title = element_text(hjust = 0.5))
g_area
?coord_flip
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area")+ coord_flip() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(limits = rev(levels(d_a$Estimator)))
g_area
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area")+ coord_flip() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_discrete(limits = rev(levels(d_a$Estimator)))
g_area
g_area= ggplot(d_a, aes(Location, value, color=Estimator)) +
geom_point(aes(shape=Estimator),size=3, position=pd)+
geom_errorbar(aes(ymin=low,ymax=up),position=pd, width=0.3)+
scale_shape_manual(name="Estimator",values=c(17,19))+
ggtitle("Area")+ coord_flip() +
theme(plot.title = element_text(hjust = 0.5))
g_area
?latex
?glm
m1=lm(y ~ x1 + x2)
summary(m1)
m2=glm(y ~ x1 + x2, family=gaussian("identical"))
summary(m2)
x1=c(56.1, 26.8, 23.9, 46.8, 34.8, 42.1, 22.9, 55.5, 56.1, 46.9, 26.7, 33.9,
37.0, 57.6, 27.2, 25.7, 37.0, 44.4, 44.7, 67.2, 48.7, 20.4, 45.2, 22.4, 23.2,
39.9, 51.3, 24.1, 56.3, 58.9, 62.2, 37.7, 36.0, 63.9, 62.5, 44.1, 46.9, 45.4,
23.7, 36.5, 56.1, 69.6, 40.3, 26.2, 67.1, 33.8, 29.9, 25.7, 40.0, 27.5)
x2=c(12.29, 11.42, 13.59, 8.64, 12.77, 9.9, 13.2, 7.34, 10.67, 18.8, 9.84, 16.72,
10.32, 13.67, 7.65, 9.44, 14.52, 8.24, 14.14, 17.2, 16.21, 6.01, 14.23, 15.63,
10.83, 13.39, 10.5, 10.01, 13.56, 11.26, 4.8, 9.59, 11.87, 11, 12.02, 10.9, 9.5,
10.63, 19.03, 16.71, 15.11, 7.22, 12.6, 15.35, 8.77, 9.81, 9.49, 15.82, 10.94, 6.53)
y = c(1.54, 0.81, 1.39, 1.09, 1.3, 1.16, 0.95, 1.29, 1.35, 1.86, 1.1, 0.96,
1.03, 1.8, 0.7, 0.88, 1.24, 0.94, 1.41, 2.13, 1.63, 0.78, 1.55, 1.5, 0.96,
1.21, 1.4, 0.66, 1.55, 1.37, 1.19, 0.88, 0.97, 1.56, 1.51, 1.09, 1.23, 1.2,
1.62, 1.52, 1.64, 1.77, 0.97, 1.12, 1.48, 0.83, 1.06, 1.1, 1.21, 0.75)
m1=lm(y ~ x1 + x2)
summary(m1)
m2=glm(y ~ x1 + x2, family=gaussian("identical"))
summary(m2)
m1=lm(y ~ x1 + x2)
summary(m1)
m2=glm(y ~ x1 + x2, family=gaussian(link="identical"))
summary(m2)
?link
m1=lm(y ~ x1 + x2)
summary(m1)
m2=glm(y ~ x1 + x2, family=gaussian(link ="identity" ))
summary(m2)
length(y)
